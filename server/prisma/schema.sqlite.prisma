// This is your Prisma schema file for SQLite
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile
  timezone     String?
  energyLevel  Int?     @default(5) // 1-10 scale
  dailyEnergy  EnergyLevel[]
  
  // Data
  tasks        Task[]
  events       Event[]
  conversations Conversation[]
  notifications Notification[]
  achievements Achievement[]
  streaks      Streak[]
  
  // Settings
  settings UserSettings?

  @@map("users")
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  
  // Notification preferences
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  smsNotifications      Boolean @default(false)
  
  // AI preferences
  aiSchedulingEnabled   Boolean @default(true)
  aiBudgetAdviceEnabled Boolean @default(true)
  aiEnergyAdaptation    Boolean @default(true)
  
  // Privacy
  dataSharingEnabled    Boolean @default(false)
  
  // Work preferences
  workHoursStart        String  @default("09:00")
  workHoursEnd          String  @default("17:00")
  breakDuration         Int     @default(15) // minutes
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model EnergyLevel {
  id        String   @id @default(cuid())
  userId    String
  level     Int      // 1-10 scale
  date      DateTime @default(now())
  notes     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("energy_levels")
}

model Task {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  status      String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED, DEFERRED
  dueDate     DateTime?
  estimatedDuration Int? // minutes
  actualDuration    Int? // minutes
  energyRequired    Int? // 1-10 scale
  budgetImpact      Float? // cost in dollars
  
  // AI-generated fields
  aiGenerated       Boolean @default(false)
  extractedFrom     String? // conversation ID or source
  
  // Scheduling
  scheduledAt       DateTime?
  completedAt       DateTime?
  
  // Relationships
  tags              String? // JSON string for tags
  subtasks          Subtask[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Subtask {
  id        String   @id @default(cuid())
  taskId    String
  title     String
  completed Boolean  @default(false)
  order     Int
  
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model Event {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  isAllDay    Boolean  @default(false)
  
  // Calendar integration
  calendarEventId String? // External calendar event ID
  calendarProvider String? // "google", "outlook", "apple"
  
  // AI enhancements
  aiGenerated Boolean @default(false)
  budgetImpact Float? // estimated cost
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  content   String
  source    String   // "chatgpt", "syncscript", "email", etc.
  extractedTasks String? // JSON string for extracted task IDs
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // TASK_REMINDER, BUDGET_ALERT, ENERGY_ADAPTATION, etc.
  title     String
  message   String
  isRead    Boolean  @default(false)
  actionUrl String?
  metadata  String?  // JSON string for additional data
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "streak", "completion", "budget", etc.
  title       String
  description String
  points      Int      @default(0)
  unlockedAt  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model Streak {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "daily_tasks", "budget_adherence", etc.
  count     Int      @default(0)
  lastDate  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("streaks")
}
